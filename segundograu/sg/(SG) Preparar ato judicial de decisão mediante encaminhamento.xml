<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Preparar ato judicial de decisão mediante encaminhamento">
    <description><![CDATA[Código do fluxo: SG_PAJ_DEC_ENC

Descrição: Fluxo destinado ao preparo de atos judiciais de decisões mediante encaminhamento.

Raia        Localização              Papel
Assessoria  Assessoria Segundo Grau  Assessoria
            Assessoria Segundo Grau  Assessor Chefe
            Assessoria Segundo Grau  Assessor para Votação Antecipada
            Gabinete Segundo Grau    Magistrado
            Assessoria Segundo Grau  Assessor Geral
Magistrado  Assessoria Segundo Grau  Assessoria
            Assessoria Segundo Grau  Assessor Chefe
            Assessoria Segundo Grau  Assessor para Votação Antecipada
            Gabinete Segundo Grau    Magistrado
            Assessoria Segundo Grau  Assessor Geral]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469,600:5898,600:5899,600:5907,5:5197,6:1469,5:5898,5:5899,5:5907,8:133')}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469,600:5898,600:5899,600:5907,5:5197,6:1469,5:5898,5:5899,5:5907,8:133')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria" priority="3"/>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - MINUTAR" name="(SG) Concluso para decisão mediante encaminhamento - MINUTAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(SG) Concluso para decisão mediante encaminhamento - MINUTAR">
        <task name="(SG) Concluso para decisão mediante encaminhamento - MINUTAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="minutaLote" mapped-name="minutarLote:minutaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor

2. Variável: minutaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de tarefa*

1. Tipo do evento: Sair da tarefa
   Agrupamento eventos: Magistrado
   Condição para lançamento temporário: #{true}]]></description>
        <transition to="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento" name="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Encaminhar para preparação do voto, relatório e ementa" name="Encaminhar para preparação do voto, relatório e ementa"/>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64')}"/>
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial') ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial')) : ''}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Encaminhar para preparação do voto, relatório e ementa')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:lancamentoMovimentoObrigatorio','true')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão mediante encaminhamento - CONFIRMAR">
        <task name="(SG) Concluso para decisão mediante encaminhamento - CONFIRMAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento" name="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - MINUTAR" name="Retornar para minuta"/>
        <transition to="(SG) Enviar autos à secretaria" name="(SG) Enviar autos à secretaria">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Enviar autos à secretaria" name="Documento já assinado! Encaminhar para secretaria">
            <condition expression="#{processoHome.instance.idProcesso &gt; 0 and not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('condicaoLancamentoMovimentosTemporario')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Enviar autos à secretaria')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão mediante encaminhamento - ASSINAR">
        <task name="(SG) Concluso para decisão mediante encaminhamento - ASSINAR" swimlane="Magistrado" priority="3">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - MINUTAR" name="Retornar para minuta"/>
        <transition to="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento" name="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Enviar autos à secretaria" name="(SG) Enviar autos à secretaria">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Enviar autos à secretaria" name="Documento já assinado! Encaminhar para secretaria">
            <condition expression="#{processoHome.instance.idProcesso &gt; 0 and not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Enviar autos à secretaria')}"/>
        </event>
    </task-node>
    <process-state name="(SG) Enviar autos à secretaria">
        <sub-process name="(SG) Autos recebidos do gabinete" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <process-state name="(SG) Encaminhar para preparação do voto, relatório e ementa">
        <sub-process name="(SG) Decisão colegiada como relator" binding="late"/>
        <transition to="(SG) Houve julgamento?" name="(SG) Houve julgamento?"/>
        <event type="node-leave">
            <action expression="#{lancadorMovimentosService.apagarMovimentosTemporarios()}"/>
        </event>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:conclusao_cancelada') == true ? '(SG) Concluso para decisão mediante encaminhamento - MINUTAR' : 'Término'}" name="(SG) Houve julgamento?">
        <transition to="(SG) Concluso para decisão mediante encaminhamento - MINUTAR" name="(SG) Concluso para decisão mediante encaminhamento - MINUTAR"/>
        <transition to="Término" name="Término"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:conclusao_cancelada')}"/>
        </event>
    </decision>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento">
        <task name="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento" swimlane="Nó de Desvio - (SG) Preparar ato judicial de decisão mediante encaminhamento" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - MINUTAR" name="(SG) Concluso para decisão mediante encaminhamento - MINUTAR"/>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - CONFIRMAR" name="(SG) Concluso para decisão mediante encaminhamento - CONFIRMAR"/>
        <transition to="(SG) Concluso para decisão mediante encaminhamento - ASSINAR" name="(SG) Concluso para decisão mediante encaminhamento - ASSINAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>