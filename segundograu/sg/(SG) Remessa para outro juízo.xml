<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Remessa para outro juízo"> 
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Remessa para outro juízo">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,1342:1469,8:1338,1342:1469')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,602:5906,602:5483,8:1338,8:5906,8:5483')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(SG) Remessa para outro juízo - CONFIRMAR" name="(SG) Remessa para outro juízo - CONFIRMAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(SG) Remessa para outro juízo - CONFIRMAR">
        <task name="(SG) Remessa para outro juízo - CONFIRMAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1   
   Label: A remessa dos autos para outro juízo poderá ser realizada a partir da materialização das peças processuais, conforme feito habitualmente. Confirme o término do procedimento clicando em "Confirmar remessa". Lembrando que, ao fazer isso, o processo só poderá voltar a ser movimentado mediante conclusão.
- A remessa para outro juízo será realizada a partir da materialização das peças processuais, conforme feito habitualmente. Ao término do procedimento clique em "Confirmar remessa". Após isso, o processo só poderá ser movimentado mediante conclusão.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(SG) Lançar movimento de remessa para outro juízo" name="Confirmar remessa"/>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (SG) Remessa para outro juízo" name="Nó de Desvio - (SG) Remessa para outro juízo">
            <condition expression="#{true}"/>
        </transition>
    </task-node>
    <node name="(SG) Lançar movimento de remessa para outro juízo">
        <transition to="(SG) Remetidos para outro juízo" name="(SG) Remetidos para outro juízo"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(123).comComplementoDeCodigo(7).doTipoLivre().preencherComTexto('a outro juízo').comComplementoDeCodigo(18).doTipoDominio().preencherComElementoDeCodigo(40).lancarMovimento()}"/>
            <action expression="#{tramitacaoProcessualService.removerSituacao('jus:andamento')}"/>
            <action expression="#{tramitacaoProcessualService.acrescentarSituacao('jus:arquivado')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(SG) Remetidos para outro juízo">
        <task name="(SG) Remetidos para outro juízo" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1   
   Label: O processo encontra-se remetido a outro juízo.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(SG) Preparação de decisão sobre reativação" name="Enviar concluso sobre reativação"/>
        <transition to="Nó de Desvio - (SG) Remessa para outro juízo" name="Nó de Desvio - (SG) Remessa para outro juízo">
            <condition expression="#{true}"/>
        </transition>
    </task-node>
    <process-state name="(SG) Preparação de decisão sobre reativação">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.removerSituacao('jus:arquivado')}"/>
            <action expression="#{tramitacaoProcessualService.acrescentarSituacao('jus:andamento')}"/>
        </event>
    </process-state>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Remessa para outro juízo">
        <task name="Nó de Desvio - (SG) Remessa para outro juízo" swimlane="Nó de Desvio - (SG) Remessa para outro juízo"/>
        <transition to="(SG) Remessa para outro juízo - CONFIRMAR" name="(SG) Remessa para outro juízo - CONFIRMAR"/>
        <transition to="(SG) Remetidos para outro juízo" name="(SG) Remetidos para outro juízo"/>
        <transition to="Término" name="Término"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>