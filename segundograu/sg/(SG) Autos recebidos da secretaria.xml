<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Autos recebidos da secretaria">
    <description><![CDATA[Código do fluxo: SG_AUT_REC_SEC

Descrição: Fluxo destinado à análise de processos devolvidos da secretaria para o gabinete.

Raia        Localização              Papel
Assessoria  Assessoria Segundo Grau  Assessor
Assessoria  Assessoria Segundo Grau  Assessor Chefe
Assessoria  Assessoria Segundo Grau  Assessor para Votação Antecipada
Assessoria  Assessoria Segundo Grau  Assessor Geral
Assessoria  Gabinete                 Magistrado
Assessoria Segundo Grau  Assessor Geral]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Autos recebidos da secretaria">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5898,600:5197,599:1469,600:5899,600:5907,5:5898,5:5197,6:1469,5:5899,5:5907,8:1338')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria"/>
        <transition to="(SG) É urgente?" name="(SG) É urgente?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:urgente') ? '(SG) Autos recebidos da secretaria [Urgente] - ANALISAR' : '(SG) Autos recebidos da secretaria - ANALISAR' }" name="(SG) É urgente?">
        <transition to="(SG) Autos recebidos da secretaria [Urgente] - ANALISAR" name="(SG) Autos recebidos da secretaria [Urgente] - ANALISAR"/>
        <transition to="(SG) Autos recebidos da secretaria - ANALISAR" name="(SG) Autos recebidos da secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:conclusao_cancelada')}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="(SG) Autos recebidos da secretaria [Urgente] - ANALISAR">
        <task name="(SG) Autos recebidos da secretaria [Urgente] - ANALISAR" swimlane="Assessoria">
            <controller>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Autos recebidos da secretaria" name="Nó de Desvio - (SG) Autos recebidos da secretaria">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Preparação de decisão genérica" name="Preparar decisão"/>
        <transition to="(SG) Preparação de decisão de urgência" name="Preparar decisão de urgência"/>
        <transition to="(SG) Preparação de decisão de embargos de declaração" name="Preparar decisão sobre embargos de declaração"/>
        <transition to="(SG) Preparação de decisão de agravo regimental ou interno" name="Preparar decisão sobre agravo regimental ou interno">
            <condition expression="#{!empty tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj')}"/>
        </transition>
        <transition to="(SG) Preparação de decisão sobre agravo em REsp. e RExt." name="Preparar decisão sobre agravo em REsp. e RExt.">
            <condition expression="#{!empty tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj')}"/>
        </transition>
        <transition to="(SG) Preparação de despacho genérico" name="Preparar despacho"/>
        <transition to="(SG) Preparação de julgamento colegiado" name="Preparar voto, relatório e ementa"/>
        <transition to="(SG) Preparação de ato ordinatório" name="Preparar ato ordinatório"/>
        <transition to="(SG) Preparação de decisão de admissibilidade de recurso" name="Preparar decisão de admissibilidade de recurso">
            <condition expression="#{!empty tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj')}"/>
        </transition>
        <transition to="(SG) Autos recebidos da secretaria - ANALISAR" name="Encaminhar para &quot;Autos recebidos da secretaria - ANALISAR&quot;">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </transition>
    </task-node>
    <task-node end-tasks="true" name="(SG) Autos recebidos da secretaria - ANALISAR">
        <task name="(SG) Autos recebidos da secretaria - ANALISAR" swimlane="Assessoria">
            <controller>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Autos recebidos da secretaria" name="Nó de Desvio - (SG) Autos recebidos da secretaria">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Preparação de decisão genérica" name="Preparar decisão"/>
        <transition to="(SG) Preparação de decisão de urgência" name="Preparar decisão de urgência"/>
        <transition to="(SG) Preparação de decisão de embargos de declaração" name="Preparar decisão sobre embargos de declaração"/>
        <transition to="(SG) Preparação de decisão de agravo regimental ou interno" name="Preparar decisão sobre agravo regimental ou interno"/>
        <transition to="(SG) Preparação de decisão sobre agravo em REsp. e RExt." name="Preparar decisão sobre agravo em REsp. e RExt.">
            <condition expression="#{!empty tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj')}"/>
        </transition>
        <transition to="(SG) Preparação de despacho genérico" name="Preparar despacho"/>
        <transition to="(SG) Preparação de julgamento colegiado" name="Preparar voto, relatório e ementa"/>
        <transition to="(SG) Preparação de ato ordinatório" name="Preparar ato ordinatório"/>
        <transition to="(SG) Preparação de decisão de admissibilidade de recurso" name="Preparar decisão de admissibilidade de recurso">
            <condition expression="#{!empty tramitacaoProcessualService.recuperaVariavel('sg:remadmrec:idOj')}"/>
        </transition>
        <transition to="(SG) Autos recebidos da secretaria [Urgente] - ANALISAR" name="Encaminhar para &quot;(SG) Autos recebidos da secretaria [Urgente] - ANALISAR&quot;">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', true)}"/>
        </transition>
    </task-node>
    <process-state name="(SG) Preparação de decisão genérica">
        <sub-process name="(SG) Preparar ato judicial de decisão genérica" binding="late"/>
        <transition to="(SG) Conclusão cancelada?" name="(SG) Conclusão cancelada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão de urgência">
        <sub-process name="(SG) Preparar ato judicial de decisão de urgência" binding="late"/>
        <transition to="(SG) Conclusão cancelada?" name="(SG) Conclusão cancelada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', true)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão de embargos de declaração">
        <sub-process name="(SG) Preparar ato judicial de decisão de embargo de declaração" binding="late"/>
        <transition to="(SG) Conclusão cancelada?" name="(SG) Conclusão cancelada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão de agravo regimental ou interno">
        <sub-process name="(SG) Preparar ato judicial de decisão de agravo regimental ou interno" binding="late"/>
        <transition to="(SG) Conclusão cancelada?" name="(SG) Conclusão cancelada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão sobre agravo em REsp. e RExt.">
        <sub-process name="(SG) Preparar ato judicial de decisão sobre agravo em resp. ou rext." binding="late"/>
        <transition to="(SG) Conclusão cancelada?" name="(SG) Conclusão cancelada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de despacho genérico">
        <sub-process name="(SG) Preparar ato judicial de despacho genérico" binding="late"/>
        <transition to="(SG) Conclusão cancelada?" name="(SG) Conclusão cancelada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de julgamento colegiado">
        <sub-process name="(SG) Decisão colegiada como relator" binding="late"/>
        <transition to="(SG) Conclusão cancelada?" name="(SG) Conclusão cancelada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de ato ordinatório">
        <sub-process name="(SG) Expedição de ato ordinatório de gabinete" binding="late"/>
        <transition to="(SG) Conclusão cancelada?" name="(SG) Conclusão cancelada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão de admissibilidade de recurso">
        <sub-process name="(SG) Preparar ato judicial de decisão de admissibilidade de recurso" binding="late"/>
        <transition to="(SG) Conclusão cancelada?" name="(SG) Conclusão cancelada?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:urgente', false)}"/>
        </event>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:conclusao_cancelada') == true ? '(SG) É urgente?' : '(SG) Apaga variáveis do fluxo'}" name="(SG) Conclusão cancelada?">
        <transition to="(SG) É urgente?" name="(SG) É urgente?"/>
        <transition to="(SG) Apaga variáveis do fluxo" name="(SG) Apaga variáveis do fluxo"/>
    </decision>
    <node name="(SG) Apaga variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:conclusao_cancelada')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Autos recebidos da secretaria">
        <task name="Nó de Desvio - (SG) Autos recebidos da secretaria" swimlane="Nó de Desvio - (SG) Autos recebidos da secretaria"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Autos recebidos da secretaria [Urgente] - ANALISAR" name="(SG) Autos recebidos da secretaria [Urgente] - ANALISAR"/>
        <transition to="(SG) Autos recebidos da secretaria - ANALISAR" name="(SG) Autos recebidos da secretaria - ANALISAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>