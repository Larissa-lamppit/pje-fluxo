<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Preparar ato judicial de decisão de urgência inicial">
    <description><![CDATA[Código do fluxo: SG_PAJ_DEC_URG_INI.

Descrição: Fluxo destinado ao preparo de atos judiciais de decisão de urgência inicial.

Raia        Localização              Papel
Assessoria  Assessoria Segundo Grau  Assessoria
            Assessoria Segundo Grau  Assessor Chefe
            Assessoria Segundo Grau  Assessor para Votação Antecipada
            Gabinete Segundo Grau    Magistrado
            Assessoria Segundo Grau  Assessor Geral
Magistrado  Assessoria Segundo Grau  Assessoria
            Assessoria Segundo Grau  Assessor Chefe
            Assessoria Segundo Grau  Assessor para Votação Antecipada
            Gabinete Segundo Grau    Magistrado
            Assessoria Segundo Grau  Assessor Geral]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469,600:5898,600:5899,600:5907')}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469,600:5898,600:5899,600:5907')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria" priority="3"/>
        <transition to="(SG) Encaminhar para ato ordinatório à PGJ?" name="(SG) Encaminhar para ato ordinatório à PGJ?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{(not empty tramitacaoProcessualService.recuperaVariavel('sg:aog:ato_ord_pgj')) ? '(SG) Expedir ato ordinatório à PGJ' : '(SG) Concluso para decisão de urgência inicial - MINUTAR'}" name="(SG) Encaminhar para ato ordinatório à PGJ?">
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="(SG) Concluso para decisão de urgência inicial - MINUTAR"/>
        <transition to="(SG) Expedir ato ordinatório à PGJ" name="(SG) Expedir ato ordinatório à PGJ"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:aog:ato_ord_pgj')}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de urgência inicial - MINUTAR">
        <task name="(SG) Concluso para decisão de urgência inicial - MINUTAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor

2. Variável: minutarLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de tarefa*

1. Tipo do evento: Sair da tarefa
   Agrupamento eventos: Magistrado
   Condição para lançamento temporário: #{true}]]></description>
        <transition to="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial" name="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de urgência inicial - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <transition to="(SG) Conclusão para despacho inicial" name="Alterar para despacho inicial"/>
        <transition to="(SG) Expedir ato ordinatório" name="Prosseguir através de ato ordinatório"/>
        <transition to="(SG) Encaminhar para preparação do voto, relatório e ementa." name="Encaminhar para preparação do voto, relatório e ementa"/>
        <transition to="(SG) Expedir ato ordinatório à PGJ" name="Prosseguir através de ato ordinatório à PGJ"/>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64')}"/>
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial') ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial')) : ''}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('condicaoLancamentoMovimentosTemporario')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Prosseguir através de ato ordinatório à PGJ,Prosseguir através de ato ordinatório,Alterar para despacho inicial,Encaminhar para preparação do voto, relatório e ementa')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:lancamentoMovimentoObrigatorio','true')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de urgência inicial - CONFIRMAR">
        <task name="(SG) Concluso para decisão de urgência inicial - CONFIRMAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="(SG) Concluso para decisão de urgência inicial - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial" name="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="Retornar para minuta"/>
        <transition to="(SG) Enviar autos à secretaria" name="Documento já assinado! Encaminhar para secretaria">
            <condition expression="#{processoHome.instance.idProcesso &gt; 0 and not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <transition to="(SG) Enviar autos à secretaria" name="(SG) Enviar autos à secretaria">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Enviar autos à secretaria')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de urgência inicial - ASSINAR">
        <task name="(SG) Concluso para decisão de urgência inicial - ASSINAR" swimlane="Magistrado" priority="4">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial" name="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="Retornar para minuta"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <transition to="(SG) Enviar autos à secretaria" name="Documento já assinado! Encaminhar para secretaria">
            <condition expression="#{processoHome.instance.idProcesso &gt; 0 and not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <transition to="(SG) Enviar autos à secretaria" name="(SG) Enviar autos à secretaria">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(SG) Enviar autos à secretaria')}"/>
        </event>
    </task-node>
    <process-state name="(SG) Enviar autos à secretaria">
        <sub-process name="(SG) Autos recebidos do gabinete" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <process-state name="(SG) Conclusão para despacho inicial">
        <sub-process name="(SG) Preparar ato judicial de despacho inicial" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <process-state name="(SG) Encaminhar para preparação do voto, relatório e ementa.">
        <sub-process name="(SG) Decisão colegiada como relator" binding="late"/>
        <transition to="(SG) Houve julgamento?" name="(SG) Houve julgamento?"/>
    </process-state>
    <process-state name="(SG) Expedir ato ordinatório">
        <sub-process name="(SG) Expedição de ato ordinatório de gabinete" binding="late"/>
        <transition to="(SG) Ato ordinatório cancelado?" name="(SG) Ato ordinatório cancelado?"/>
    </process-state>
    <process-state name="(SG) Expedir ato ordinatório à PGJ">
        <sub-process name="(SG) Expedição de ato ordinatório do gabinete à PGJ" binding="late"/>
        <transition to="(SG) Ato ordinatório cancelado?" name="(SG) Ato ordinatório cancelado?"/>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:conclusao_cancelada') == true ? '(SG) Concluso para decisão de urgência inicial - MINUTAR' : 'Término'}" name="(SG) Houve julgamento?">
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="(SG) Concluso para decisão de urgência inicial - MINUTAR"/>
        <transition to="Término" name="Término"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:conclusao_cancelada')}"/>
        </event>
    </decision>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:conclusao_cancelada') == true ? '(SG) Concluso para decisão de urgência inicial - MINUTAR' : 'Término'}" name="(SG) Ato ordinatório cancelado?">
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="(SG) Concluso para decisão de urgência inicial - MINUTAR"/>
        <transition to="Término" name="Término"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:conclusao_cancelada')}"/>
        </event>
    </decision>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial">
        <task name="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial" swimlane="Nó de Desvio - (SG) Preparar ato judicial de decisão de urgência inicial" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="(SG) Concluso para decisão de urgência inicial - MINUTAR"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - ASSINAR" name="(SG) Concluso para decisão de urgência inicial - ASSINAR"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - CONFIRMAR" name="(SG) Concluso para decisão de urgência inicial - CONFIRMAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>