<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão">
    <description><![CDATA[Código do fluxo: SG_PAJ_DEC_REA_ACO

Descrição: Fluxo destinado ao preparo de atos judiciais de decisões sobre.

Raia        Localização              Papel
Assessoria  Assessoria Segundo Grau  Assessoria
            Gabinete Segundo Grau    Magistrado
Magistrado  Assessoria Segundo Grau  Assessoria
            Gabinete Segundo Grau    Magistrado]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('-1:-1')}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria"/>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR" name="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR">
        <task name="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="MinutarEmLote" mapped-name="minutarLote:MinutarEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor

2. Variável: MinutarEmLote
   Label: Minutar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de tarefa*

1. Tipo do evento: Sair da tarefa
   Agrupamento eventos: Magistrado
   Condição para lançamento temporário: #{true}]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão" name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Emissão de ato ordinatório" name="Cancelar através de ato ordinatório"/>
        <event type="task-create">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
            <action expression="#{tipoDocumento.set('TipoDocumento',63,64)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Cancelar através de ato ordinatório')}"/>
        </event>
        <event type="task-end">
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial') ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial')) : ''}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('condicaoLancamentoMovimentosTemporario')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão sobre reanálise do acórdão - CONFIRMAR">
        <task name="(SG) Concluso para decisão sobre reanálise do acórdão - CONFIRMAR" swimlane="Assessoria">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Confirmar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão" name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR" name="Retornar para minuta"/>
        <event type="task-create">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('condicaoLancamentoMovimentosTemporario')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão sobre reanálise do acórdão - ASSINAR">
        <task name="(SG) Concluso para decisão sobre reanálise do acórdão - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Assinar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR" name="Retornar para minuta"/>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão" name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('condicaoLancamentoMovimentosTemporario')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <process-state name="(SG) Emissão de ato ordinatório">
        <sub-process name="(SG) Expedição de ato ordinatório de gabinete" binding="late"/>
        <transition to="(SG) Cancelou a conclusão?" name="(SG) Cancelou a conclusão?"/>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:eccse:assinou_ato_ordinatorio') == true ? 'Término' : '(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR'}" name="(SG) Cancelou a conclusão?">
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR" name="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR"/>
        <transition to="Término" name="Término"/>
    </decision>
    <end-state name="Término">
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão">
        <task name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão" swimlane="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão sobre Reanálise de Acórdão"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR" name="(SG) Concluso para decisão sobre reanálise do acórdão - MINUTAR"/>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - CONFIRMAR" name="(SG) Concluso para decisão sobre reanálise do acórdão - CONFIRMAR"/>
        <transition to="(SG) Concluso para decisão sobre reanálise do acórdão - ASSINAR" name="(SG) Concluso para decisão sobre reanálise do acórdão - ASSINAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
