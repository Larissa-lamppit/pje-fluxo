<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(TR) Fluxo Básico Geral">
    <description><![CDATA[Fluxo básico geral de entrada dos processos das Câmaras Cíveis e Pleno Cível......]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (TR) Fluxo Básico Geral"/>
    <swimlane name="Secretaria Segundo Grau">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('8:1338,8:5483')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria Segundo Grau" priority="3"/>
        <transition to="(TR) Direciona diretamente para secretaria?" name="(TR) Direciona diretamente para secretaria?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('tr:fbg:direcionar_secretaria') == true ?  '(TR) Análise da Secretaria' : '(TR) É recurso inominado?'}" name="(TR) Direciona diretamente para secretaria?">
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <transition to="(TR) É recurso inominado?" name="(TR) É recurso inominado?"/>
    </decision>
    <decision expression="#{tramitacaoProcessualService.recuperaProcesso().classeJudicial.codClasseJudicial == 460 ? '(TR) Gravar variável de ato inicial dos Recursos inominados' : '(TR) Tem pedido de urgência?'}" name="(TR) É recurso inominado?">
        <transition to="(TR) Tem pedido de urgência?" name="(TR) Tem pedido de urgência?"/>
        <transition to="(TR) Gravar variável de ato inicial dos Recursos inominados" name="(TR) Gravar variável de ato inicial dos Recursos inominados"/>
    </decision>
    <node name="(TR) Gravar variável de ato inicial dos Recursos inominados">
        <transition to="(TR) Preparação de relatório, voto e ementa" name="(TR) Preparação de relatório, voto e ementa"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:RecIno_Inicial', true)}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.temUrgencia() ? '(TR) Conclusão para decisão de urgência inicial' : '(TR) Conclusão para despacho inicial'}" name="(TR) Tem pedido de urgência?">
        <transition to="(TR) Conclusão para decisão de urgência inicial" name="(TR) Conclusão para decisão de urgência inicial"/>
        <transition to="(TR) Conclusão para despacho inicial" name="(TR) Conclusão para despacho inicial"/>
    </decision>
    <process-state name="(TR) Conclusão para decisão de urgência inicial">
        <sub-process name="(TR) Preparar Ato Judicial" binding="late"/>
        <transition to="(TR) Despachados urgentes" name="(TR) Despachados urgentes"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao_urgencia_inicial')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao','true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao_urgencia_inicial','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para despacho inicial">
        <sub-process name="(TR) Preparar Ato Judicial" binding="late"/>
        <transition to="(TR) Despachados" name="(TR) Despachados"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:despacho')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:despacho_inicial')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:despacho','true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:despacho_inicial','true')}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(TR) Despachados urgentes">
        <task name="(TR) Despachados urgentes" swimlane="Secretaria Segundo Grau" priority="3">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Fluxo Básico Geral" name="Nó de Desvio - (TR) Fluxo Básico Geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Análise da Secretaria" name="Cumprir decisão"/>
        <transition to="(TR) Preparar comunicação da decisão inicial" name="Preparar comunicação da decisão inicial"/>
    </task-node>
    <task-node end-tasks="true" name="(TR) Despachados">
        <task name="(TR) Despachados" swimlane="Secretaria Segundo Grau" priority="3">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Fluxo Básico Geral" name="Nó de Desvio - (TR) Fluxo Básico Geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Análise da Secretaria" name="Cumprir despacho"/>
        <transition to="(TR) Preparar comunicação da decisão inicial" name="Preparar comunicação do despacho inicial"/>
    </task-node>
    <process-state name="(TR) Preparar comunicação da decisão inicial">
        <sub-process name="(TR) Preparar Ato de Comunicação" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:pac:citar_intimar')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:pac:citar_intimar','true')}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(TR) Análise da Secretaria">
        <task name="(TR) Análise da Secretaria" swimlane="Secretaria Segundo Grau" priority="3">
            <controller>
                <variable name="tr_fbg_apesar_desapensar" mapped-name="sim_nao:tr_fbg_apesar_desapensar" access="read,write"/>
                <variable name="tr_fbg_certificar_decurso" mapped-name="sim_nao:tr_fbg_certificar_decurso" access="read,write"/>
                <variable name="tr_fbg_certificar_transito" mapped-name="sim_nao:tr_fbg_certificar_transito" access="read,write"/>
                <variable name="tr_fbg_citar_intimar" mapped-name="sim_nao:tr_fbg_citar_intimar" access="read,write"/>
                <variable name="tr_fbg_controlar_retorno_expediente" mapped-name="sim_nao:tr_fbg_controlar_retorno_expediente" access="read,write"/>
                <variable name="tr_fbg_encerrar_prazo" mapped-name="sim_nao:tr_fbg_encerrar_prazo" access="read,write"/>
                <variable name="tr_fbg_expedir_carta" mapped-name="sim_nao:tr_fbg_expedir_carta" access="read,write"/>
                <variable name="tr_fbg_expedir_mandado" mapped-name="sim_nao:tr_fbg_expedir_mandado" access="read,write"/>
                <variable name="tr_fbg_expedir_oficio" mapped-name="sim_nao:tr_fbg_expedir_oficio" access="read,write"/>
                <variable name="tr_fbg_intimar_MP" mapped-name="sim_nao:tr_fbg_intimar_MP" access="read,write"/>
                <variable name="tr_fbg_suspender" mapped-name="sim_nao:tr_fbg_suspender" access="read,write"/>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Fluxo Básico Geral" name="Nó de Desvio - (TR) Fluxo Básico Geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Dar cumprimento a ato judicial" name="01 - Prosseguir na(s) tarefa(s) selecionada(s)"/>
        <transition to="(TR) Redistribuição de processo" name="02 - Redistribuir processo"/>
        <transition to="(TR) Arquivamento de processo" name="03 - Arquivar processo"/>
        <transition to="(TR) Cancelamento de distribuição de processo" name="04 - Cancelar distribuição"/>
        <transition to="(TR) Encaminhamento para instância superior" name="05 - Encaminhar para instância superior"/>
        <transition to="(TR) Encaminhamento para o primeiro grau" name="06 - Encaminhar para o primeiro grau"/>
        <transition to="(TR) Preparação de relatório, voto e ementa" name="07 - Enviar para elaboração de relatório, voto e ementa"/>
        <transition to="(TR) Conclusão para decisão de urgência" name="08 - Enviar concluso para decisão de urgência"/>
        <transition to="(TR) Conclusão para decisão" name="09 - Enviar concluso para decisão"/>
        <transition to="(TR) Conclusão para decisão de Embargos de Declaração" name="10 - Enviar concluso para decisão de Embargos de Declaração"/>
        <transition to="(TR) Conclusão para decisão de Agravo Regimental" name="11 - Enviar concluso para decisão de Agravo Regimental"/>
        <transition to="(TR) Conclusão para decisão de Agravo Interno" name="12 - Enviar concluso para decisão de Agravo Interno"/>
        <transition to="(TR) Conclusão para decisão de extinção" name="13 - Enviar concluso para decisão de extinção"/>
        <transition to="(TR) Conclusão para despacho" name="14 - Enviar concluso para despacho"/>
        <transition to="(TR) Conclusão para decisão da presidência" name="15 - Enviar concluso para decisão - Presidente"/>
        <transition to="(TR) Conclusão para despacho da presidência" name="16 - Enviar concluso para despacho - Presidente"/>
        <transition to="(TR) Enviar para a Turma de Uniformização de Jurisprudência" name="17 - Enviar para a Turma de Uniformização de Jurisprudência"/>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) incluir processo no fluxo (SG) Secretaria - ANALISAR" name="18 - Movimentar processo para o fluxo (SG) Secretaria - ANALISAR"/>
        <event type="task-start">
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:apesar_desapensar')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:certificar_decurso')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:certificar_transito')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:citar_intimar')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:controlar_retorno_expediente')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:expedir_carta')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:expedir_mandado')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:expedir_oficio')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:intimar_MP')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:cumpridec:suspender')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('tr:fbg:encerrar:prazo')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:apesar_desapensar', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_apesar_desapensar'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:certificar_decurso', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_certificar_decurso'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:certificar_transito', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_certificar_transito'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:citar_intimar', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_citar_intimar'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:controlar_retorno_expediente', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_controlar_retorno_expediente'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:expedir_carta', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_expedir_carta'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:expedir_mandado', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_expedir_mandado'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:expedir_oficio', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_expedir_oficio'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:intimar_MP', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_intimar_MP'))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:cumpridec:suspender', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_suspender'))}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_apesar_desapensar')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_certificar_decurso')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_certificar_transito')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_citar_intimar')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_controlar_retorno_expediente')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_expedir_carta')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_expedir_mandado')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_expedir_oficio')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_intimar_MP')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_suspender')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavel('tr:fbg:encerrar:prazo', tramitacaoProcessualService.recuperaVariavelTarefa('sim_nao:tr_fbg_encerrar_prazo'))}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavelTarefa('sim_nao:tr_fbg_encerrar_prazo')}"/>
        </event>
    </task-node>
    <process-state name="(TR) Dar cumprimento a ato judicial">
        <sub-process name="(TR) Cumprimento de decisão" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
    </process-state>
    <process-state name="(TR) Redistribuição de processo">
        <sub-process name="(TR) Redistribuição" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
    </process-state>
    <process-state name="(TR) Arquivamento de processo">
        <sub-process name="(TR) Arquivamento" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
    </process-state>
    <process-state name="(TR) Cancelamento de distribuição de processo">
        <sub-process name="(TR) Cancelamento de distribuição" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
    </process-state>
    <process-state name="(TR) Encaminhamento para instância superior">
        <sub-process name="(TR) Remessa para outra instância" binding="late"/>
        <transition to="(TR) É migração para o SG?" name="(TR) É migração para o SG?"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:reminst:instancia_superior')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:reminst:instancia_superior','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Encaminhamento para o primeiro grau">
        <sub-process name="(TR) Remessa para outra instância" binding="late"/>
        <transition to="(TR) É migração para o SG?" name="(TR) É migração para o SG?"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:reminst:primeiro_grau')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:reminst:primeiro_grau','true')}"/>
        </event>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:reminst:migrado_tr') == true ? '(TR) incluir processo no fluxo (SG) Secretaria - ANALISAR' : '(TR) Análise da Secretaria'}" name="(TR) É migração para o SG?">
        <description><![CDATA[Nó de decisão se o processo deve ser migrado do fluxo TR para o fluxo SG.]]></description>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <transition to="(TR) incluir processo no fluxo (SG) Secretaria - ANALISAR" name="(TR) incluir processo no fluxo (SG) Secretaria - ANALISAR"/>
    </decision>
    <process-state name="(TR) Preparação de relatório, voto e ementa">
        <sub-process name="(TR) Preparar Sessão de Julgamento" binding="late"/>
        <transition to="(TR) Encaminhar RecIno para Despachados?" name="(TR) Encaminhar RecIno para Despachados?"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:RecIno_Inicial')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para decisão de urgência">
        <sub-process name="(TR) Preparar Ato Judicial" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao_urgencia')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao','true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao_urgencia','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para decisão">
        <sub-process name="(TR) Preparar Ato Judicial" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao_generica')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao','true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao_generica','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para decisão de Embargos de Declaração">
        <sub-process name="(TR) Preparar Ato Judicial" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao_embargos_declaracao')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao','true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao_embargos_declaracao','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para decisão de Agravo Regimental">
        <sub-process name="(TR) Preparar Ato Judicial" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao_agravo_regimental')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao','true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao_agravo_regimental','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para decisão de Agravo Interno">
        <sub-process name="(TR) Preparar Ato Judicial" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao_agravo_interno')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao','true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao_agravo_interno','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para decisão de extinção">
        <sub-process name="(TR) Preparar Ato Judicial" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:decisao_extincao')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao','true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:decisao_extincao','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para despacho">
        <sub-process name="(TR) Preparar Ato Judicial" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:despacho')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:despacho_generico')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:despacho','true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:paj:despacho_generico','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para decisão da presidência">
        <sub-process name="(TR) Remessa para a presidência" binding="late"/>
        <transition to="(TR) Tem certidão sem efeito?" name="(TR) Tem certidão sem efeito"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:rempre:decisao_presidencia')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:rempre:decisao_presidencia','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Conclusão para despacho da presidência">
        <sub-process name="(TR) Remessa para a presidência" binding="late"/>
        <transition to="(TR) Tem certidão sem efeito?" name="(TR) Tem certidão sem efeito"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:rempre:despacho_presidencia')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tr:rempre:despacho_presidencia','true')}"/>
        </event>
    </process-state>
    <process-state name="(TR) Enviar para a Turma de Uniformização de Jurisprudência">
        <sub-process name="(TUJ) Fluxo básico geral" binding="late"/>
        <transition to="(TR) Processos devolvidos pela TUJ" name="(TR) Processos devolvidos pela TUJ"/>
    </process-state>
    <process-state name="(TR) Processos devolvidos pela TUJ">
        <sub-process name="(TR) Processos devolvidos pela TUJ" binding="late"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
    </process-state>
    <decision expression="#{true == tramitacaoProcessualService.recuperaVariavel('pje:rempre:temcertidaosemefeito') ? '(TR) Análise da Secretaria' : '(TR) Despachados pela presidência'}" name="(TR) Tem certidão sem efeito?">
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <transition to="(TR) Despachados pela presidência" name="(TR) Despachados pela presidência"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:rempre:temcertidaosemefeito')}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="(TR) Despachados pela presidência">
        <task name="(TR) Despachados pela presidência" swimlane="Secretaria Segundo Grau" priority="3">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Fluxo Básico Geral" name="Nó de Desvio - (TR) Fluxo Básico Geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Análise da Secretaria" name="Cumprir despacho"/>
        <transition to="(TR) Preparar comunicação da decisão inicial" name="Preparar comunicação"/>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('tr:paj:RecIno_Assinado') == true ? '(TR) Despachados' : '(TR) Análise da Secretaria'}" name="(TR) Encaminhar RecIno para Despachados?">
        <transition to="(TR) Despachados" name="(TR) Despachados"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tr:paj:RecIno_Assinado')}"/>
        </event>
    </decision>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (TR) Fluxo Básico Geral">
        <task name="Nó de Desvio - (TR) Fluxo Básico Geral" swimlane="Nó de Desvio - (TR) Fluxo Básico Geral" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="(TR) Despachados urgentes" name="(TR) Despachados urgentes"/>
        <transition to="(TR) Despachados" name="(TR) Despachados"/>
        <transition to="(TR) Análise da Secretaria" name="(TR) Análise da Secretaria"/>
        <transition to="(TR) Despachados pela presidência" name="(TR) Despachados pela presidência"/>
    </task-node>
    <node name="(TR) incluir processo no fluxo (SG) Secretaria - ANALISAR">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:fbg:direcionar_secretaria',true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:reminst:migrado_tr',tramitacaoProcessualService.recuperaVariavel('sg:reminst:migrado_tr') == true)}"/>
            <action expression="#{processoJudicialService.incluirNovoFluxo(tramitacaoProcessualService.recuperaProcesso(), 'SG_FBG', processInstance.contextInstance.variables)}"/>
        </event>
    </node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
