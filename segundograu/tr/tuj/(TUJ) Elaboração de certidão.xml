<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(TUJ) Elaboração de certidão">
    <description><![CDATA[Código do fluxo: TUJ_ELAB_CERT

Descrição: Fluxo destinado à minuta e assinatura da certidão de recebimento..

Raia        Localização     Papel
Secretaria  Secretaria TUJ  Chefe de Secretaria]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (TUJ) Elaboração de certidão">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('10265:1338')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria" priority="3"/>
        <transition to="(TUJ) Certidão - EXPEDIR" name="(TUJ) Certidão - EXPEDIR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(TUJ) Certidão - EXPEDIR">
        <task name="(TUJ) Certidão - EXPEDIR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="minuta_certidao" mapped-name="textEditCombo:minuta_certidao" access="read,write,required"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_certidao
   Label: Minuta em elaboração de certidão
   Escrita: Sim
   Obrig.: Sim
   Tipo: Editor

2. Variável: minutarLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Minutar em Lote]]></description>
        <transition to="Nó de Desvio - (TUJ) Elaboração de certidão" name="Nó de Desvio - (TUJ) Elaboração de certidão">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TUJ) Certidão - ASSINAR" name="Encaminhar para assinatura"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_certidao'))}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','57')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','57')}"/>
            <action expression="#{lancadorMovimentosService.apagarMovimentosTemporarios()}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(TUJ) Certidão - ASSINAR">
        <task name="(TUJ) Certidão - ASSINAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (TUJ) Elaboração de certidão" name="Nó de Desvio - (TUJ) Elaboração de certidão">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TUJ) Lançar movimento de expedição de certidão" name="(TUJ) Lançar movimento de expedição de certidão">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TUJ) Certidão - EXPEDIR" name="Retornar para expedição de certidão"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('condicaoLancamentoMovimentosTemporario')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','57')}"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(TUJ) Lançar movimento de expedição de certidão')}"/>
        </event>
    </task-node>
    <node name="(TUJ) Lançar movimento de expedição de certidão">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(60).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(107).lancarMovimento()}"/>
        </event>
    </node>
    <end-state name="Término">
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - (TUJ) Elaboração de certidão">
        <task name="Nó de Desvio - (TUJ) Elaboração de certidão" swimlane="Nó de Desvio - (TUJ) Elaboração de certidão" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="(TUJ) Certidão - EXPEDIR" name="(TUJ) Certidão - EXPEDIR"/>
        <transition to="(TUJ) Certidão - ASSINAR" name="(TUJ) Certidão - ASSINAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>