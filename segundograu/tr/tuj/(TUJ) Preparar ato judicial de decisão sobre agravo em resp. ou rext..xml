<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext.">
    <description><![CDATA[Código do fluxo: TUJ_PAJ_DEC_AGR_RESP_REXT.

Descrição: Fluxo destinado ao preparo de atos judiciais de decisões sobre agravo em resp. ou rext.

Raia        Localização     Papel
Assessoria  Assessoria TUJ  Assessor
Assessoria  Gabinete TUJ    Magistrado
Magistrado  Assessoria TUJ  Assessor
Magistrado  Gabinete TUJ    Magistrado]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('10261:5197,10260:1469')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('10261:5197,10260:1469')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext.">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria" priority="3"/>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - MINUTAR" name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - MINUTAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - MINUTAR">
        <task name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - MINUTAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor

2. Variável: minutarLote
   Label: Minutar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de Tarefa*

1. Tipo do evento: Sair Tarefa
   Agrupamento eventos: Magistrado
   Condição para lançamento temporário: #{true}]]></description>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <transition to="(TUJ) Gravar variável de cancelamento de conclusão" name="Alterar escolha do tipo de conclusão"/>
        <transition to="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext." name="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext.">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64')}"/>
        </event>
        <event type="task-end">
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial') ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial')) : ''}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Alterar escolha do tipo de conclusão')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:lancamentoMovimentoObrigatorio','true')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - CONFIRMAR">
        <task name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - CONFIRMAR" swimlane="Assessoria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - MINUTAR" name="Retornar para minuta"/>
        <transition to="(TUJ) Enviar autos à secretaria" name="(TUJ) Enviar autos à secretaria">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TUJ) Enviar autos à secretaria" name="Documento já assinado! Encaminhar para secretaria">
            <condition expression="#{processoHome.instance.idProcesso &gt; 0 and not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <transition to="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext." name="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext.">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(TUJ) Enviar autos à secretaria')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - ASSINAR">
        <task name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - ASSINAR" swimlane="Magistrado" priority="3">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - MINUTAR" name="Retornar para minuta"/>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <transition to="(TUJ) Enviar autos à secretaria" name="(TUJ) Enviar autos à secretaria">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TUJ) Enviar autos à secretaria" name="Documento já assinado! Encaminhar para secretaria">
            <condition expression="#{processoHome.instance.idProcesso &gt; 0 and not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <transition to="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext." name="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext.">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(TUJ) Enviar autos à secretaria')}"/>
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64')}"/>
        </event>
    </task-node>
    <process-state name="(TUJ) Enviar autos à secretaria">
        <sub-process name="(TUJ) Autos recebidos do gabinete" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <node name="(TUJ) Gravar variável de cancelamento de conclusão">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:conclusao_cancelada', true)}"/>
        </event>
    </node>
    <end-state name="Término">
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext.">
        <task name="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext." swimlane="Nó de Desvio - (TUJ) Preparar ato judicial de decisão sobre agravo em resp. ou rext." priority="3"/>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - MINUTAR" name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - MINUTAR"/>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - CONFIRMAR" name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - CONFIRMAR"/>
        <transition to="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - ASSINAR" name="(TUJ) Concluso para decisão sobre agravo em resp. ou rext. - ASSINAR"/>
        <transition to="Término" name="Término"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>