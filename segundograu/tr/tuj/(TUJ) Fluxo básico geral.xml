<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(TUJ) Fluxo básico geral">
    <description><![CDATA[Código do fluxo: TUJ_FBG

Descrição: Fluxo básico geral de entrada dos processos.

Raia        Localização     Papel
Secretaria  Secretaria TUJ  Chefe de Secretaria]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (TUJ) Fluxo básico geral">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('10265:1338')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria" priority="3"/>
        <transition to="(TUJ) Autos recebidos das Turmas Recursais" name="(TUJ) Autos recebidos das Turmas Recursais"/>
    </start-state>  
    <!-- NODES -->
    <process-state name="(TUJ) Autos recebidos das Turmas Recursais">
        <sub-process name="(TUJ) Autos recebidos das Turmas Recursais" binding="late"/>
        <transition to="(TUJ) Elaborar certidão ou sair?" name="(TUJ) Elaborar certidão ou sair?"/>
    </process-state>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('tuj:aut_rec_tr:transicaoSaida') ? tramitacaoProcessualService.recuperaVariavel('tuj:aut_rec_tr:transicaoSaida') : '(TUJ) Encaminhar para elaborar certidão'}" name="(TUJ) Elaborar certidão ou sair?">
        <transition to="(TUJ) Encaminhar para elaborar certidão" name="(TUJ) Encaminhar para elaborar certidão"/>
        <transition to="Término" name="Término"/>
    </decision>
    <process-state name="(TUJ) Encaminhar para elaborar certidão">
        <sub-process name="(TUJ) Elaboração de certidão" binding="late"/>
        <transition to="(TUJ) Remessa para admissibilidade" name="(TUJ) Remessa para admissibilidade"/>
    </process-state>
    <process-state name="(TUJ) Remessa para admissibilidade">
        <sub-process name="(TUJ) Preparar ato judicial para decisão de admissibilidade" binding="late"/>
        <transition to="(TUJ) Intimar ou cumprir determinações?" name="(TUJ) Intimar ou cumprir determinações?"/>
    </process-state>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('tuj:aut_rec_pre:transicaoSaida') ? tramitacaoProcessualService.recuperaVariavel('tuj:aut_rec_pre:transicaoSaida') : 'Secretaria - ANALISAR'}" name="(TUJ) Intimar ou cumprir determinações?">
        <transition to="(TUJ) Secretaria - ANALISAR" name="Secretaria - ANALISAR"/>
        <transition to="(TUJ) Intimar" name="Intimar"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tuj:aut_rec_pre:transicaoSaida')}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="(TUJ) Secretaria - ANALISAR">
        <task name="(TUJ) Secretaria - ANALISAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: #{tramitacaoProcessualService.recuperaVariavel('tuj:fbg:aviso_secretaria_analisar') ? '' : tramitacaoProcessualService.recuperaVariavel('tuj:fbg:aviso_secretaria_analisar')}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso
2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (TUJ) Fluxo básico geral" name="Nó de Desvio - (TUJ) Fluxo básico geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Devolver para a Turma Recursal"/>
        <transition to="(TUJ) Gravar variavel fluxo unico - Suspender o processo" name="Suspender o processo"/>
        <transition to="(TUJ) Gravar variavel fluxo unico - Redistribuir" name="Redistribuir processo"/>
        <transition to="(TUJ) Gravar variavel fluxo unico - Intimar" name="Intimar"/>
        <transition to="(TUJ) Gravar variavel fluxo unico - Sortear" name="Sortear para um dos relatores">
            <condition expression="#{not tramitacaoProcessualService.recuperaVariavel('pje:fluxo:tuj:devolverTR')}"/>
        </transition>
        <transition to="(TUJ) Gravar variavel fluxo unico - Enviar concluso para decisão" name="Enviar concluso para decisão"/>
        <transition to="(TUJ) Gravar variavel fluxo unico - Enviar concluso para despacho" name="Enviar concluso para despacho"/>
        <transition to="(TUJ) Gravar variavel fluxo unico - Enviar para preparação do voto, relatório e ementa" name="Enviar concluso para julgamento"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
    </task-node>
    <node name="(TUJ) Gravar variavel fluxo unico - Suspender o processo">
        <transition to="(TUJ) Pode ir para subfluxo único?" name="(TUJ) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:sub_fluxo_unico', '(TUJ) Controle de suspensão')}"/>
        </event>
    </node>
    <node name="(TUJ) Gravar variavel fluxo unico - Redistribuir">
        <transition to="(TUJ) Pode ir para subfluxo único?" name="(TUJ) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:sub_fluxo_unico', '(TUJ) Redistribuição')}"/>
        </event>
    </node>
    <node name="(TUJ) Gravar variavel fluxo unico - Intimar">
        <transition to="(TUJ) Pode ir para subfluxo único?" name="(TUJ) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:sub_fluxo_unico', '(TUJ) Intimar')}"/>
        </event>
    </node>
    <node name="(TUJ) Gravar variavel fluxo unico - Sortear">
        <transition to="(TUJ) Pode ir para subfluxo único?" name="(TUJ) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:sub_fluxo_unico', '(TUJ) Existe assunto principal?')}"/>
        </event>
    </node>
    <node name="(TUJ) Gravar variavel fluxo unico - Enviar concluso para decisão">
        <transition to="(TUJ) Pode ir para subfluxo único?" name="(TUJ) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:sub_fluxo_unico', '(TUJ) Preparação de decisão genérica')}"/>
        </event>
    </node>
    <node name="(TUJ) Gravar variavel fluxo unico - Enviar concluso para despacho">
        <transition to="(TUJ) Pode ir para subfluxo único?" name="(TUJ) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:sub_fluxo_unico', '(TUJ) Preparação de despacho genérico')}"/>
        </event>
    </node>
    <node name="(TUJ) Gravar variavel fluxo unico - Enviar para preparação do voto, relatório e ementa">
        <transition to="(TUJ) Pode ir para subfluxo único?" name="(TUJ) Pode ir para subfluxo único?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:sub_fluxo_unico', '(TUJ) Preparação de voto, relatório e ementa')}"/>
        </event>
    </node>
    <decision expression="#{entityManager.createNativeQuery(&quot;select count(*) from vs_situacao_processo_new s where s.nm_tarefa not in ('(TUJ) Secretaria - ANALISAR') AND s.id_processo_trf = :idProcessoTrf&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(TUJ) Gravar mensagem nao pode entrar no fluxo' : tramitacaoProcessualService.recuperaVariavel('tuj:paj:sub_fluxo_unico')}" name="(TUJ) Pode ir para subfluxo único?">
        <transition to="(TUJ) Controle de suspensão" name="(TUJ) Controle de suspensão"/>
        <transition to="(TUJ) Redistribuição" name="(TUJ) Redistribuição"/>
        <transition to="(TUJ) Intimar" name="(TUJ) Intimar"/>
        <transition to="(TUJ) Existe assunto principal?" name="(TUJ) Existe assunto principal?"/>
        <transition to="(TUJ) Preparação de decisão genérica" name="(TUJ) Preparação de decisão genérica"/>
        <transition to="(TUJ) Preparação de despacho genérico" name="(TUJ) Preparação de despacho genérico"/>
        <transition to="(TUJ) Preparação de voto, relatório e ementa" name="(TUJ) Preparação de voto, relatório e ementa"/>
        <transition to="(TUJ) Gravar mensagem nao pode entrar no fluxo" name="(TUJ) Gravar mensagem nao pode entrar no fluxo"/>
    </decision>
    <node name="(TUJ) Gravar mensagem nao pode entrar no fluxo">
        <transition to="(TUJ) Secretaria - ANALISAR" name="(TUJ) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:fbg:aviso_secretaria_analisar', 'O processo não pôde ser movimentado pois há ações sendo efetuadas em outras tarefas. Para movimentá-lo, é necessário finalizar os procedimentos nas demais caixas e deixá-lo, apenas, em &quot;(TUJ) Secretaria - ANALISAR&quot;.')}"/>
        </event>
    </node>
    <process-state name="(TUJ) Intimar">
        <sub-process name="(TUJ) Preparar ato de comunicação" binding="late"/>
        <transition to="(TUJ) Controle de retorno de expedientes" name="(TUJ) Controle de retorno de expedientes"/>
    </process-state>
    <process-state name="(TUJ) Controle de retorno de expedientes">
        <sub-process name="(TUJ) Controle de retorno de expedientes" binding="late"/>
        <transition to="(TUJ) Secretaria - ANALISAR" name="(TUJ) Secretaria - ANALISAR"/>
    </process-state>
    <decision expression="#{(entityManager.createQuery(parametroUtil.getParametro('pje:tjrn:tuj:consultaAssuntoPrincipal')).setParameter(&quot;processo&quot;, tramitacaoProcessualService.recuperaProcesso().getIdProcessoTrf()).getSingleResult() == 0 ? '(TUJ) Sorteio pendente de assunto principal' : '(TUJ) Sortear')}" name="(TUJ) Existe assunto principal?">
        <transition to="(TUJ) Sortear" name="(TUJ) Sortear"/>
        <transition to="(TUJ) Sorteio pendente de assunto principal" name="(TUJ) Sorteio pendente de assunto principal"/>
    </decision>
    <process-state name="(TUJ) Sorteio pendente de assunto principal">
        <sub-process name="(TUJ) Sorteio pendente de assunto principal" binding="late"/>
        <transition to="(TUJ) Sortear ou sair?" name="(TUJ) Sortear ou sair?"/>
    </process-state>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('tuj:sor_pen_ass:transicaoSaida') ? tramitacaoProcessualService.recuperaVariavel('tuj:sor_pen_ass:transicaoSaida') : 'Sortear para um dos relatores'}" name="(TUJ) Sortear ou sair?">
        <transition to="(TUJ) Existe assunto principal?" name="Sortear para um dos relatores"/>
        <transition to="(TUJ) Secretaria - ANALISAR" name="Cancelar e sair da tarefa"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tuj:sor_pen_ass:transicaoSaida')}"/>
        </event>
    </decision>
    <process-state name="(TUJ) Sortear">
        <sub-process name="(TUJ) Sortear para um dos relatores" binding="late"/>
        <transition to="(TUJ) Autos recebidos da admissibilidade" name="(TUJ) Autos recebidos da admissibilidade"/>
        <event type="node-enter">
            <action expression="#{entityManager.createQuery(parametroUtil.getParametro('pje:tjrn:tuj:alteraCompetenciaTUJ')).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).executeUpdate()}"/>
        </event>
    </process-state>
    <process-state name="(TUJ) Autos recebidos da admissibilidade">
        <sub-process name="(TUJ) Autos recebidos da admissibilidade" binding="late"/>
        <transition to="(TUJ) Enviar concluso ou sair?" name="(TUJ) Enviar concluso ou sair?"/>
    </process-state>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('tuj:aut_rec_adm:transicaoSaida') ? tramitacaoProcessualService.recuperaVariavel('tuj:aut_rec_adm:transicaoSaida') : 'Secretaria - ANALISAR'}" name="(TUJ) Enviar concluso ou sair?">
        <transition to="(TUJ) Enviar concluso para julgamento" name="Enviar concluso para julgamento"/>
        <transition to="(TUJ) Secretaria - ANALISAR" name="Secretaria - ANALISAR"/>
    </decision>
    <process-state name="(TUJ) Enviar concluso para julgamento">
        <sub-process name="(TUJ) Decisão colegiada como relator" binding="late"/>
        <transition to="(TUJ) Secretaria - ANALISAR" name="(TUJ) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(TUJ) Redistribuição">
        <sub-process name="(TUJ) Redistribuição" binding="late"/>
        <transition to="(TUJ) Enviar concluso para julgamento" name="(TUJ) Enviar concluso para julgamento"/>
    </process-state>
    <process-state name="(TUJ) Controle de suspensão">
        <sub-process name="(TUJ) Controle de suspensão" binding="late"/>
        <transition to="(TUJ) Secretaria - ANALISAR" name="(TUJ) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(TUJ) Preparação de decisão genérica">
        <sub-process name="(TUJ) Preparar ato judicial" binding="late"/>
        <transition to="(TUJ) Secretaria - ANALISAR" name="(TUJ) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tuj:paj:decisao')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:decisao', true)}"/>
        </event>
    </process-state>
    <process-state name="(TUJ) Preparação de despacho genérico">
        <sub-process name="(TUJ) Preparar ato judicial" binding="late"/>
        <transition to="(TUJ) Secretaria - ANALISAR" name="(TUJ) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tuj:paj:despacho')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:despacho', true)}"/>
        </event>
    </process-state>
    <process-state name="(TUJ) Preparação de voto, relatório e ementa">
        <sub-process name="(TUJ) Preparar ato judicial" binding="late"/>
        <transition to="(TUJ) Secretaria - ANALISAR" name="(TUJ) Secretaria - ANALISAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tuj:paj:julgamento')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tuj:paj:julgamento', true)}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="Nó de Desvio - (TUJ) Fluxo básico geral">
        <task name="Nó de Desvio - (TUJ) Fluxo básico geral" swimlane="Nó de Desvio - (TUJ) Fluxo básico geral" priority="3"/>
        <transition to="Término" name="Término"/>
        <transition to="(TUJ) Secretaria - ANALISAR" name="(TUJ) Secretaria - ANALISAR"/>
    </task-node>
    <end-state name="Término"/>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS -->
    <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:tuj:devolverTR', true)}"/> 
</process-definition>
