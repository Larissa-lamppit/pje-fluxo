<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(EF) Conclusão para decisão genérica">
    <description><![CDATA[Código do fluxo: EF_PAJ_EXEF_DEC_GEN]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('6:1469,6:5901,7:5197,8:5852,8:5853,5:1338')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (EF) Conclusão para decisão genérica">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Assessor">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('6:1469,6:5901,7:5197,8:5852,8:5853,5:1338')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial"/>
        <transition to="(EF) Concluso para decisão - MINUTAR" name="(EF) Concluso para decisão - MINUTAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(EF) Concluso para decisão - MINUTAR">
        <task name="(EF) Concluso para decisão - MINUTAR" swimlane="Magistrado">
            <controller>
                <variable name="minuta_decisao" mapped-name="textEditCombo:minuta_decisao" access="read,write"/>
                <variable name="MinutaEmLote" mapped-name="minutarLote:MinutaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_decisao
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig.: Não
   Tipo: Editor

2. Variável: MinutaEmLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Minutar em Lote]]></description>
        <transition to="(EF) Concluso para decisão - ASSINAR" name="Encaminhar para assinatura"/>
        <transition to="Nó de Desvio - (EF) Conclusão para decisão genérica" name="Nó de Desvio - (EF) Conclusão para decisão genérica">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Emissão de certidão sem efeito" name="Emitir certidão de conclusão sem efeito"/>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '62,63,64')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('textEditCombo:minuta_decisao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minutaEmElaboracao') == null ? tramitacaoProcessualService.recuperaVariavel('minutaEmElaboracao') : tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minutaEmElaboracao'))}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_decisao'))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:lancamentoMovimentoObrigatorio','true')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Concluso para decisão - ASSINAR">
        <task name="(EF) Concluso para decisão - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="(EF) Concluso para decisão - MINUTAR" name="Retornar para minuta"/>
        <transition to="(EF) Encaminhar para despachados" name="(EF) Encaminhar para despachados">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Encaminhar para despachados" name="Documento já assinado! Encaminhar para secretaria">
            <condition expression="#{processoHome.instance.idProcesso &gt; 0 and not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <transition to="Nó de Desvio - (EF) Conclusão para decisão genérica" name="Nó de Desvio - (EF) Conclusão para decisão genérica">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('Processo_Fluxo_revisarMinutaTipoProcessoDocumento')}"/>
        </event>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Encaminhar para despachados')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '62,63,64')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:lancamentoMovimentoObrigatorio','true')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '62,63,64')}"/>
        </event>
    </task-node>
    <process-state name="(EF) Encaminhar para despachados">
        <sub-process name="(EF) Autos recebidos do gabinete - Genérico" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <process-state name="(EF) Emissão de certidão sem efeito">
        <sub-process name="(EF) Expedição de Certidão sem efeito" binding="late"/>
        <transition to="(EF) Emitiu certidão sem efeito ?" name="(EF) Emitiu certidão sem efeito ?"/>
    </process-state>
    <decision expression="#{documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('pje:atoProferido')).getTipoProcessoDocumento().idTipoProcessoDocumento == 57 ? 'Término' : '(EF) Concluso para decisão - MINUTAR'}" name="(EF) Emitiu certidão sem efeito ?">
        <transition to="(EF) Concluso para decisão - MINUTAR" name="(EF) Concluso para decisão - MINUTAR"/>
        <transition to="Término" name="Término"/>
    </decision>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (EF) Conclusão para decisão genérica">
        <task name="Nó de Desvio - (EF) Conclusão para decisão genérica" swimlane="Nó de Desvio - (EF) Conclusão para decisão genérica"/>
        <transition to="(EF) Concluso para decisão - MINUTAR" name="(EF) Concluso para decisão - MINUTAR"/>
        <transition to="Término" name="Término"/>
        <transition to="(EF) Concluso para decisão - ASSINAR" name="(EF) Concluso para decisão - ASSINAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
