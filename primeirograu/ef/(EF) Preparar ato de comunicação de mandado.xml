<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(EF) Preparar ato de comunicação de mandado">
    <description><![CDATA[Código do fluxo: EF_PAC_MAND.

Descrição: Fluxo destinado a permitir a realização de atos de comunicação de mandados.

Raia         Localização   Papel
Secretaria   Secretaria    Chefe de Secretaria
Secretaria   Secretaria    Servidor de Secretaria
Secretaria   Gabinete      Magistrado
Secretaria   Corregedoria  Servidor Corregedoria
Secretaria   Corregedoria  Magistrado Corregedor
Magistrado   Secretaria    Chefe de Secretaria
Magistrado   Secretaria    Servidor de Secretaria
Magistrado   Gabinete      Magistrado
Magistrado   Gabinete      Magistrado Gabinete
Magistrado   Corregedoria  Servidor Corregedoria
Magistrado   Corregedoria  Magistrado Corregedor]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901,7:5197')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901,7:5197')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria" priority="3"/>
        <transition to="(EF) Mandado genérico - EXPEDIR" name="(EF) Mandado genérico - EXPEDIR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(EF) Mandado genérico - EXPEDIR">
        <task name="(EF) Mandado genérico - EXPEDIR" swimlane="Magistrado" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Preparação de mandado
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: Aviso1
   Label: Caso deseje encaminhar o expediente para uma tarefa específica de assinatura listadas abaixo, é essencial que todos as abas (Escolha dos destinatários, Preparar ato, Escolher documentos vinculados e finalizar) sejam preenchidas.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="(EF) Existe alguma Central de Mandados?" name="(EF) Existe alguma Central de Mandados?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Encaminhar para assinatura de mandado?" name="Encaminhar para assinatura do chefe de secretaria">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pg:tjrn:AntMand', '(EF) Mandado genérico - EXPEDIR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pg:tjrn:ProxMand', '(EF) Mandado genérico [chefe de secretaria] - ASSINAR')}"/>
        </transition>
        <transition to="(EF) Encaminhar para assinatura de mandado?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pg:tjrn:AntMand', '(EF) Mandado genérico - EXPEDIR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pg:tjrn:ProxMand', '(EF) Mandado [magistrado] - ASSINAR')}"/>
        </transition>
        <transition to="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Apagar variáveis do fluxo" name="Finalizar e sair da tarefa"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempMand', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pg:tjrn:MandValidoParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Existe alguma Central de Mandados?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('M')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,167,168,169,170')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Mandado genérico [chefe de secretaria] - ASSINAR">
        <task name="(EF) Mandado genérico [chefe de secretaria] - ASSINAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Preparação de mandado
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="(EF) Existe alguma Central de Mandados?" name="(EF) Existe alguma Central de Mandados?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Mandado genérico - EXPEDIR" name="Retornar para expedição de mandado"/>
        <transition to="(EF) Encaminhar para assinatura de mandado?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pg:tjrn:AntMand', '(EF) Mandado genérico [chefe de secretaria] - ASSINAR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pg:tjrn:ProxMand', '(EF) Mandado [magistrado] - ASSINAR')}"/>
        </transition>
        <transition to="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempMand',org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pg:tjrn:MandValidoParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Existe alguma Central de Mandados?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('M')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,167,168,169,170')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('pg:tjrn:MandValidoParaAss') == true ? tramitacaoProcessualService.recuperaVariavel('pg:tjrn:ProxMand') : tramitacaoProcessualService.recuperaVariavel('pg:tjrn:AntMand') }" name="(EF) Encaminhar para assinatura de mandado?">
        <transition to="(EF) Mandado genérico [chefe de secretaria] - ASSINAR" name="(EF) Mandado genérico [chefe de secretaria] - ASSINAR"/>
        <transition to="(EF) Mandado genérico - EXPEDIR" name="(EF) Mandado genérico - EXPEDIR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pg:tjrn:MandValidoParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pg:tjrn:AntMand')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pg:tjrn:ProxMand')}"/>
        </event>
    </decision>
    <decision expression="#{conectorMandados.haVariasCentraisMandado() ? '(EF) Mandado genérico [Central de mandados] - SELECIONAR' : '(EF) Lançar movimento de Expedição de Mandado'}" name="(EF) Existe alguma Central de Mandados?">
        <transition to="(EF) Mandado genérico [Central de mandados] - SELECIONAR" name="(EF) Mandado genérico [Central de mandados] - SELECIONAR"/>
        <transition to="(EF) Lançar movimento de Expedição de Mandado" name="(EF) Lançar movimento de Expedição de Mandado"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Mandado genérico [Central de mandados] - SELECIONAR">
        <task name="(EF) Mandado genérico [Central de mandados] - SELECIONAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="Processo_Fluxo_expedientes_centralmandados" mapped-name="frame:Processo_Fluxo_expedientes_centralmandados" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_expedientes_centralmandados
   Label: Expedientes da central de mandados
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="(EF) Lançar movimento de Expedição de Mandado" name="Finalizar e prosseguir"/>
        <transition to="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Lançar movimento de Expedição de Mandado')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
    </task-node>
    <node name="(EF) Lançar movimento de Expedição de Mandado">
        <transition to="(EF) Mandado genérico pendente de devolução - AGUARDAR" name="(EF) Mandado genérico pendente de devolução - AGUARDAR"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('M', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(78).lancarMovimento()}')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Mandado genérico pendente de devolução - AGUARDAR">
        <task name="(EF) Mandado genérico pendente de devolução - AGUARDAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="MovimentarLote" mapped-name="movimentarLote:MovimentarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: MovimentarLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(EF) Apagar variáveis do fluxo" name="Finalizar e sair da tarefa"/>
        <transition to="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Mandado genérico pendente de devolução [030 dias] - AGUARDAR" name="(EF) Mandado genérico pendente de devolução [030 dias] - AGUARDAR">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Mandados genéricos devolvidos - ANALISAR" name="(EF) Mandados genéricos devolvidos - ANALISAR">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda_devolucao_mandado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda30')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition2')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda_devolucao_mandado', 'true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda30', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Mandado genérico pendente de devolução [030 dias] - AGUARDAR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition2', '(EF) Mandados genéricos devolvidos - ANALISAR')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Mandado genérico pendente de devolução [030 dias] - AGUARDAR">
        <task name="(EF) Mandado genérico pendente de devolução [030 dias] - AGUARDAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="MovimentarLote" mapped-name="movimentarLote:MovimentarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: MovimentarLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(EF) Apagar variáveis do fluxo" name="Finalizar e sair da tarefa"/>
        <transition to="(EF) Mandado genérico pendente de devolução [060 dias] - AGUARDAR" name="(EF) Mandado genérico pendente de devolução [060 dias] - AGUARDAR">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Mandados genéricos devolvidos - ANALISAR" name="(EF) Mandados genéricos devolvidos - ANALISAR">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda_devolucao_mandado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda60')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition2')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda_devolucao_mandado', 'true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda60', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Mandado genérico pendente de devolução [060 dias] - AGUARDAR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition2', '(EF) Mandados genéricos devolvidos - ANALISAR')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Mandado genérico pendente de devolução [060 dias] - AGUARDAR">
        <task name="(EF) Mandado genérico pendente de devolução [060 dias] - AGUARDAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="MovimentarLote" mapped-name="movimentarLote:MovimentarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: MovimentarLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(EF) Apagar variáveis do fluxo" name="Finalizar e sair da tarefa"/>
        <transition to="(EF) Mandado genérico pendente de devolução [100 dias ou mais] - AGUARDAR" name="(EF) Mandado genérico pendente de devolução [100 dias ou mais] - AGUARDAR">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Mandados genéricos devolvidos - ANALISAR" name="(EF) Mandados genéricos devolvidos - ANALISAR">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda_devolucao_mandado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda100')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition2')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda_devolucao_mandado', 'true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda100', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Mandado genérico pendente de devolução [100 dias ou mais] - AGUARDAR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition2', '(EF) Mandados genéricos devolvidos - ANALISAR')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Mandado genérico pendente de devolução [100 dias ou mais] - AGUARDAR">
        <task name="(EF) Mandado genérico pendente de devolução [100 dias ou mais] - AGUARDAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="MovimentarLote" mapped-name="movimentarLote:MovimentarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: MovimentarLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(EF) Apagar variáveis do fluxo" name="Finalizar e sair da tarefa"/>
        <transition to="(EF) Mandados genéricos devolvidos - ANALISAR" name="(EF) Mandados genéricos devolvidos - ANALISAR">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda_devolucao_mandado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition2')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda_devolucao_mandado', 'true')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Mandados genéricos devolvidos - ANALISAR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition2', '(EF) Mandados genéricos devolvidos - ANALISAR')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Mandados genéricos devolvidos - ANALISAR">
        <task name="(EF) Mandados genéricos devolvidos - ANALISAR" swimlane="Secretaria" priority="3">
            <controller>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: MovimentarEmLote
   Label:]]></description>
        <transition to="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Apagar variáveis do fluxo" name="Finalizar e sair da tarefa"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{processoHome.limparCaixaTriagem()}"/>
        </event>
        <event type="node-enter">
            <action expression="#{processoHome.fazerTriagemExecucaoFiscal('(EF) Mandados genéricos devolvidos - ANALISAR', true, false, true, true)}"/>
        </event>
    </task-node>
    <node name="(EF) Apagar variáveis do fluxo">
        <transition to="(EF) Devolução à secretaria" name="(EF) Devolução à secretaria"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempCitInt')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempMand')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pg:tjrn:CitIntValidaParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pg:tjrn:MandValidoParaAss')}"/>
        </event>
    </node>
    <process-state name="(EF) Devolução à secretaria">
        <sub-process name="(EF) Fluxo de devolução à secretaria" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado">
        <task name="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" swimlane="Nó de Desvio - (EF) Preparar ato de comunicação de mandado" priority="3"/>
        <transition to="(EF) Mandado genérico - EXPEDIR" name="(EF) Mandado genérico - EXPEDIR"/>
        <transition to="(EF) Mandado genérico [chefe de secretaria] - ASSINAR" name="(EF) Mandado genérico [chefe de secretaria] - ASSINAR"/>
        <transition to="(EF) Mandado genérico [Central de mandados] - SELECIONAR" name="(EF) Mandado genérico [Central de mandados] - SELECIONAR"/>
        <transition to="Término" name="Término"/>
        <transition to="(EF) Mandado genérico pendente de devolução - AGUARDAR" name="(EF) Mandado genérico pendente de devolução - AGUARDAR"/>
        <transition to="(EF) Mandados genéricos devolvidos - ANALISAR" name="(EF) Mandados genéricos devolvidos - ANALISAR"/>
        <transition to="(EF) Mandado genérico pendente de devolução [030 dias] - AGUARDAR" name="(EF) Mandado genérico pendente de devolução [030 dias] - AGUARDAR"/>
        <transition to="(EF) Mandado genérico pendente de devolução [060 dias] - AGUARDAR" name="(EF) Mandado genérico pendente de devolução [060 dias] - AGUARDAR"/>
        <transition to="(EF) Mandado genérico pendente de devolução [100 dias ou mais] - AGUARDAR" name="(EF) Mandado genérico pendente de devolução [100 dias ou mais] - AGUARDAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
